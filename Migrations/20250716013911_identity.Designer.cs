// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication_SRPFIQ.Data;

#nullable disable

namespace WebApplication_SRPFIQ.Migrations
{
    [DbContext(typeof(SRPFIQDbContext))]
    [Migration("20250716013911_identity")]
    partial class identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.BirthPlaces", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("BirthPlaces", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MaternalExperiences", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BabyGender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("BabyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlaceOther")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BreastFeedingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HadDeceased")
                        .HasColumnType("bit");

                    b.Property<bool>("HadEpidural")
                        .HasColumnType("bit");

                    b.Property<bool>("HadEpisiotomy")
                        .HasColumnType("bit");

                    b.Property<bool>("HadInductionLabor")
                        .HasColumnType("bit");

                    b.Property<bool>("HadMembranesRupture")
                        .HasColumnType("bit");

                    b.Property<bool>("HadNaturalReliefs")
                        .HasColumnType("bit");

                    b.Property<bool>("HadOtherAnesthetic")
                        .HasColumnType("bit");

                    b.Property<bool>("HadPlannedCesarean")
                        .HasColumnType("bit");

                    b.Property<bool>("HadPsychologicalSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("HadSuctionCupsForceps")
                        .HasColumnType("bit");

                    b.Property<bool>("HadUnPlannedCesarean")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBeenTranfered")
                        .HasColumnType("bit");

                    b.Property<int?>("IdBirthPlace")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicalTransferReason")
                        .HasColumnType("int");

                    b.Property<int>("IdRequest")
                        .HasColumnType("int");

                    b.Property<bool>("IsBreastFeedingAtBirth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBreastFeedingSixWeeks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNaturalDelivery")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SizeAtBirthDays")
                        .HasColumnType("int");

                    b.Property<int?>("SizeAtBithWeeks")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdBirthPlace");

                    b.HasIndex("IdMedicalTransferReason");

                    b.HasIndex("IdRequest");

                    b.ToTable("MaternalExperiences", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MaternalExperiencesThemes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPrenatal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("MaternalExperiencesThemes", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MaternalExperiences_MaternalExperienceThemes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("IdMaternalExperience")
                        .HasColumnType("int");

                    b.Property<int>("IdMaternalExperienceTheme")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdMaternalExperience");

                    b.HasIndex("IdMaternalExperienceTheme");

                    b.ToTable("MaternalExperiences_MaternalExperienceThemes", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MedicalNotes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRequest")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IdRequest");

                    b.HasIndex("IdUser");

                    b.ToTable("MedicalNotes", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MedicalTransferReason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("MedicalTransferReason", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Meetings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Delay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMeetingType")
                        .HasColumnType("int");

                    b.Property<int>("IdRequest")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingNumber")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IdRequest");

                    b.HasIndex("IdUser");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireAnswerResults", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("IdQuestionnaireAnswer")
                        .HasColumnType("int");

                    b.Property<int>("IdQuestionnaireQuestion")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IdQuestionnaireAnswer");

                    b.HasIndex("IdQuestionnaireQuestion");

                    b.ToTable("QuestionnaireAnswerResults", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireAnswers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdQuestionnaire")
                        .HasColumnType("int");

                    b.Property<int>("IdRequest")
                        .HasColumnType("int");

                    b.Property<int>("IdStatuts")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("IdQuestionnaire");

                    b.HasIndex("IdRequest");

                    b.HasIndex("IdUser");

                    b.ToTable("QuestionnaireAnswers", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireDataSourceOptions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdQuestionnaireDataSource")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdQuestionnaireDataSource");

                    b.ToTable("QuestionnaireDataSourceOptions", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireDataSources", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("QuestionnaireDataSources", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireQuestions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("IdMainDataSource")
                        .HasColumnType("int");

                    b.Property<int>("IdMainDataType")
                        .HasColumnType("int");

                    b.Property<int>("IdQuestionnaire")
                        .HasColumnType("int");

                    b.Property<int?>("IdSubDataSource")
                        .HasColumnType("int");

                    b.Property<int?>("IdSubDataType")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ShortTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("IdMainDataSource");

                    b.HasIndex("IdQuestionnaire");

                    b.ToTable("QuestionnaireQuestions", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Questionnaires", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Questionnaires", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.RequestNotes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRequest")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IdRequest");

                    b.HasIndex("IdUser");

                    b.ToTable("RequestNotes", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Requests", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChildsAge")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolioNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IdUserClosedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImmigrationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsMonoparental")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalCoverage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("NbChilds")
                        .HasColumnType("int");

                    b.Property<string>("NbPregnancy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReceivedRequestAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpokenLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("IdUserClosedBy");

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.ResourceBusinessHours", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<TimeOnly>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("IdResource")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("IdResource");

                    b.ToTable("ResourceBusinessHours", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.ResourceCategories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("ResourceCategories", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.ResourceCities", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("ResourceCities", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Resources", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusNearBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdResourceCity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("IdResourceCity");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Resources_ResourceCategories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("IdResource")
                        .HasColumnType("int");

                    b.Property<int>("IdResourceCategory")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdResource");

                    b.HasIndex("IdResourceCategory");

                    b.ToTable("Resources_ResourceCategories", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.UserAssignedRequests", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("IdRequest")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("IdRequest");

                    b.HasIndex("IdUser");

                    b.ToTable("UserAssignedRequests", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.UserPermissions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdUserRole")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserRole");

                    b.ToTable("UserPermissions", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.UserRoles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MaternalExperiences", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.BirthPlaces", "BirthPlaces")
                        .WithMany("MaternalExperiences")
                        .HasForeignKey("IdBirthPlace");

                    b.HasOne("WebApplication_SRPFIQ.Models.MedicalTransferReason", "MedicalTransferReason")
                        .WithMany()
                        .HasForeignKey("IdMedicalTransferReason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Requests", "Requests")
                        .WithMany()
                        .HasForeignKey("IdRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthPlaces");

                    b.Navigation("MedicalTransferReason");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MaternalExperiences_MaternalExperienceThemes", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.MaternalExperiences", "MaternalExperiences")
                        .WithMany("MaternalExperiences_MaternalExperiencesThemes")
                        .HasForeignKey("IdMaternalExperience")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.MaternalExperiencesThemes", "MaternalExperiencesThemes")
                        .WithMany("MaternalExperiences_MaternalExperiencesThemes")
                        .HasForeignKey("IdMaternalExperienceTheme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaternalExperiences");

                    b.Navigation("MaternalExperiencesThemes");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MedicalNotes", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Requests", "Requests")
                        .WithMany("MedicalNotes")
                        .HasForeignKey("IdRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Users", "Users")
                        .WithMany("MedicalNotes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Meetings", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Requests", "Request")
                        .WithMany("Meetings")
                        .HasForeignKey("IdRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Users", "User")
                        .WithMany("Meetings")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireAnswerResults", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.QuestionnaireAnswers", "QuestionnaireAnswers")
                        .WithMany("AnswerResults")
                        .HasForeignKey("IdQuestionnaireAnswer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.QuestionnaireQuestions", "QuestionnaireQuestions")
                        .WithMany("AnswerResults")
                        .HasForeignKey("IdQuestionnaireQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionnaireAnswers");

                    b.Navigation("QuestionnaireQuestions");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireAnswers", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Questionnaires", "Questionnaires")
                        .WithMany("Answers")
                        .HasForeignKey("IdQuestionnaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Requests", "Requests")
                        .WithMany("QuestionnaireAnswers")
                        .HasForeignKey("IdRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Users", "Users")
                        .WithMany("QuestionnaireAnswers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaires");

                    b.Navigation("Requests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireDataSourceOptions", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.QuestionnaireDataSources", "QuestionnaireDataSources")
                        .WithMany()
                        .HasForeignKey("IdQuestionnaireDataSource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionnaireDataSources");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireQuestions", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.QuestionnaireDataSources", "QuestionnaireDataSources")
                        .WithMany()
                        .HasForeignKey("IdMainDataSource");

                    b.HasOne("WebApplication_SRPFIQ.Models.Questionnaires", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("IdQuestionnaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("QuestionnaireDataSources");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.RequestNotes", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Requests", "Request")
                        .WithMany("Notes")
                        .HasForeignKey("IdRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Users", "User")
                        .WithMany("RequestNotes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Requests", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Users", "UserClosedBy")
                        .WithMany()
                        .HasForeignKey("IdUserClosedBy");

                    b.Navigation("UserClosedBy");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.ResourceBusinessHours", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Resources", "Resource")
                        .WithMany()
                        .HasForeignKey("IdResource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Resources", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.ResourceCities", "ResourceCity")
                        .WithMany()
                        .HasForeignKey("IdResourceCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceCity");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Resources_ResourceCategories", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Resources", "Resource")
                        .WithMany("Resources_ResourceCategories")
                        .HasForeignKey("IdResource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.ResourceCategories", "ResourceCategory")
                        .WithMany("Resources_ResourceCategories")
                        .HasForeignKey("IdResourceCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("ResourceCategory");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.UserAssignedRequests", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Requests", "Requests")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("IdRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.Users", "Users")
                        .WithMany("AssignedRequests")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.UserPermissions", b =>
                {
                    b.HasOne("WebApplication_SRPFIQ.Models.Users", "Users")
                        .WithMany("Permissions")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication_SRPFIQ.Models.UserRoles", "UserRole")
                        .WithMany("Permissions")
                        .HasForeignKey("IdUserRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.BirthPlaces", b =>
                {
                    b.Navigation("MaternalExperiences");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MaternalExperiences", b =>
                {
                    b.Navigation("MaternalExperiences_MaternalExperiencesThemes");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.MaternalExperiencesThemes", b =>
                {
                    b.Navigation("MaternalExperiences_MaternalExperiencesThemes");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireAnswers", b =>
                {
                    b.Navigation("AnswerResults");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.QuestionnaireQuestions", b =>
                {
                    b.Navigation("AnswerResults");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Questionnaires", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Requests", b =>
                {
                    b.Navigation("AssignedUsers");

                    b.Navigation("MedicalNotes");

                    b.Navigation("Meetings");

                    b.Navigation("Notes");

                    b.Navigation("QuestionnaireAnswers");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.ResourceCategories", b =>
                {
                    b.Navigation("Resources_ResourceCategories");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Resources", b =>
                {
                    b.Navigation("Resources_ResourceCategories");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.UserRoles", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WebApplication_SRPFIQ.Models.Users", b =>
                {
                    b.Navigation("AssignedRequests");

                    b.Navigation("MedicalNotes");

                    b.Navigation("Meetings");

                    b.Navigation("Permissions");

                    b.Navigation("QuestionnaireAnswers");

                    b.Navigation("RequestNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
